# CI/CD Pipeline for ClubOS
# Comprehensive code quality checks including build, lint, format, and type checking

name: 🚀 CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🎯 Type checking
        run: bun run type-check

      - name: 🔧 ESLint check
        run: bun run lint

      - name: 💅 Prettier format check
        run: bun run format:check

  # Job 2: Build Test
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔨 Build application
        run: bun run build
        env:
          NODE_ENV: production

      - name: 📊 Bundle size analysis
        run: |
          echo "## 📦 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "Build completed successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          if [ -f ".next/analyze" ]; then
            echo "Bundle analysis files generated." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
          key: build-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-

  # Job 3: Database Schema Validation
  database:
    name: 🗄️ Database Schema
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: quality

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔧 Generate Drizzle migrations
        run: bun run db:generate
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db'

      - name: ✅ Validate schema changes
        run: |
          if [ -n "$(git status --porcelain src/lib/db/migrations/)" ]; then
            echo "❌ Database schema changes detected but migrations not committed!"
            echo "Please run 'bun run db:generate' and commit the migration files."
            exit 1
          else
            echo "✅ Database schema is up to date!"
          fi

  # Job 4: Security and Performance
  security:
    name: 🛡️ Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Audit dependencies
        run: bun audit --audit-level moderate

      - name: 🔐 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Job 5: Deployment Readiness
  deploy-ready:
    name: 🚀 Deploy Ready
    runs-on: ubuntu-latest
    needs: [quality, build, database]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: ✅ All checks passed
        run: |
          echo "🎉 All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "✅ Code quality: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build test: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Database schema: VALIDATED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ready for deployment! 🚀" >> $GITHUB_STEP_SUMMARY
