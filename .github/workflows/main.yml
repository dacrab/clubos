# Main CI/CD Pipeline for ClubOS
# Consolidated workflow to avoid race conditions and optimize resource usage

name: 🚀 ClubOS CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  merge_group:

# Prevent multiple runs on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  BUN_VERSION: 1.2.20
  NODE_ENV: production

permissions:
  contents: write
  security-events: write
  pull-requests: write
  checks: write

jobs:
  # Stage 1: Setup and basic validation
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      should-run-security: ${{ steps.check-trigger.outputs.run-security }}

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for security scans

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 🔑 Generate cache key
        id: cache-key
        run: |
          CACHE_KEY="deps-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/package.json') }}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "Cache key: $CACHE_KEY"

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Check trigger conditions
        id: check-trigger
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "run-security=true" >> $GITHUB_OUTPUT
          else
            echo "run-security=false" >> $GITHUB_OUTPUT
          fi

    # Stage 2: Code quality and static analysis
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🎯 Type checking
        run: bun run type-check

      - name: 💅 Auto-format code
        run: bun run format

      - name: 🔧 Auto-fix linting issues
        run: bun run lint:fix

      - name: 📝 Commit formatting changes
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "🎨 style: auto-format code [skip ci]"
            git push
            echo "✅ Committed formatting changes" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No formatting changes needed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ✅ Final code quality validation
        run: |
          echo "Running final validation checks..."
          bun run lint
          bun run format:check

      - name: 🗄️ Database schema validation
        run: |
          bun run db:generate
          if [ -n "$(git status --porcelain src/lib/db/migrations/)" ]; then
            echo "❌ Database schema changes detected but migrations not committed!"
            echo "Please run 'bun run db:generate' and commit the migration files."
            exit 1
          else
            echo "✅ Database schema is up to date!"
          fi
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db'
          NEXT_PUBLIC_STACK_PROJECT_ID: 'ci-test-build'
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: 'ci-test-key'
          STACK_SECRET_SERVER_KEY: 'ci-test-secret'

  # Stage 3: Security analysis (only for PRs and scheduled runs)
  security:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [setup, quality]
    if: needs.setup.outputs.should-run-security == 'true' || github.event_name == 'schedule'

    strategy:
      fail-fast: false
      matrix:
        scan-type: [codeql, secrets, dependencies]

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Bun (for dependency scan)
        if: matrix.scan-type == 'dependencies'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies (for dependency scan)
        if: matrix.scan-type == 'dependencies'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      # CodeQL Analysis
      - name: 🔧 Initialize CodeQL
        if: matrix.scan-type == 'codeql'
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🏗️ Autobuild (CodeQL)
        if: matrix.scan-type == 'codeql'
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        if: matrix.scan-type == 'codeql'
        uses: github/codeql-action/analyze@v3

      # Secret Scanning
      - name: 🔐 Scan for secrets
        if: matrix.scan-type == 'secrets'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --fail

      # Dependency Security Scan
      - name: 🔍 Security audit
        if: matrix.scan-type == 'dependencies'
        run: |
          echo "## 🛡️ Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if bun audit --audit-level moderate; then
            echo "✅ No security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

    # Stage 4: Build verification (lightweight - Vercel handles actual deployment)
  build-check:
    name: ✅ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup, quality]

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🔨 Verify build compiles
        run: |
          echo "## ✅ Build Verification" >> $GITHUB_STEP_SUMMARY
          echo "Verifying that the project compiles successfully..." >> $GITHUB_STEP_SUMMARY

          # Quick build check (Vercel will do the actual build)
          if bun run build; then
            echo "✅ Build verification successful" >> $GITHUB_STEP_SUMMARY
            echo "🚀 Ready for Vercel deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build verification failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        env:
          # Mock environment variables for CI build verification
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db'
          NEXT_PUBLIC_STACK_PROJECT_ID: 'ci-test-build'
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: 'ci-test-key'
          STACK_SECRET_SERVER_KEY: 'ci-test-secret'
          NODE_ENV: 'production'

  # Stage 5: Final validation and reporting
  validation:
    name: ✅ Final Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup, quality, build-check]
    if: always()

    steps:
      - name: 📊 Generate final report
        run: |
          echo "## 🎯 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

                    # Check all job results
          setup_result="${{ needs.setup.result }}"
          quality_result="${{ needs.quality.result }}"
          build_result="${{ needs.build-check.result }}"

          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | $([ "$setup_result" = "success" ] && echo "✅ PASSED" || echo "❌ FAILED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | $([ "$quality_result" = "success" ] && echo "✅ PASSED" || echo "❌ FAILED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | $([ "$build_result" = "success" ] && echo "✅ PASSED" || echo "❌ FAILED") |" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [ "$setup_result" = "success" ] && [ "$quality_result" = "success" ] && [ "$build_result" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **All checks passed!** Ready for Vercel deployment." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Stage 6: Deployment readiness (only for main branch)
  deploy-ready:
    name: 🚀 Deploy Ready
    runs-on: ubuntu-latest
    needs: [setup, quality, build-check, validation]
    if: github.ref == 'refs/heads/main' && needs.validation.result == 'success'

    steps:
      - name: 🎉 Deployment ready
        run: |
          echo "## 🚀 Ready for Vercel Deployment!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality gates passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build verification successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security checks completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Code quality validated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Vercel will handle the production build and deployment automatically" >> $GITHUB_STEP_SUMMARY
