# Security scanning workflow for ClubOS
# Includes CodeQL analysis and dependency vulnerability scanning

name: 🛡️ Security Analysis

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch: # Allow manual trigger

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: read

jobs:
  # Job 1: CodeQL Analysis
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  # Job 2: Dependency Vulnerability Scan
  dependency-scan:
    name: 📦 Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Security audit
        run: |
          echo "## 🛡️ Security Audit Results" >> $GITHUB_STEP_SUMMARY
          bun audit --audit-level moderate || {
            echo "⚠️ Security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            echo "Please review and update vulnerable packages." >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ No security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Generate dependency report
        run: |
          echo "### 📊 Dependency Overview" >> $GITHUB_STEP_SUMMARY
          echo "**Total packages:** $(bun pm ls --all | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "**Production dependencies:** $(jq '.dependencies | length' package.json)" >> $GITHUB_STEP_SUMMARY
          echo "**Development dependencies:** $(jq '.devDependencies | length' package.json)" >> $GITHUB_STEP_SUMMARY

  # Job 3: Secret Scanning
  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --fail

  # Job 4: License Compliance
  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 📄 Check licenses
        run: |
          echo "## 📄 License Compliance Check" >> $GITHUB_STEP_SUMMARY

          # Check for GPL licenses or other restrictive licenses
          if bun pm ls --all | grep -i "gpl"; then
            echo "⚠️ Found GPL licensed dependencies - review required!" >> $GITHUB_STEP_SUMMARY
            bun pm ls --all | grep -i "gpl" >> $GITHUB_STEP_SUMMARY || true
          else
            echo "✅ No restrictive licenses detected!" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Security Summary
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, license-check]
    if: always()

    steps:
      - name: 📊 Generate security report
        run: |
          echo "## 🛡️ Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.codeql.result }}" == "success" ]]; then
            echo "✅ **CodeQL Analysis:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CodeQL Analysis:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "✅ **Dependency Security:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Security:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.license-check.result }}" == "success" ]]; then
            echo "✅ **License Compliance:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **License Compliance:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Security Status:** $(date)" >> $GITHUB_STEP_SUMMARY
