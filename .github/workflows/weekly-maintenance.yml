# Weekly maintenance workflow for ClubOS
# Comprehensive health checks and maintenance reporting

name: 🧹 Weekly Maintenance

on:
  schedule:
    # Run every Sunday at 1 AM UTC (non-conflicting time)
    - cron: '0 1 * * 0'
  workflow_dispatch: # Allow manual trigger

# Prevent conflicts with other workflows
concurrency:
  group: maintenance-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  pull-requests: read

env:
  BUN_VERSION: 1.2.20

jobs:
  # Comprehensive health and security audit
  health-audit:
    name: 🏥 Health & Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      health-score: ${{ steps.calculate-score.outputs.score }}
      issues-found: ${{ steps.calculate-score.outputs.issues }}

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🎯 TypeScript health check
        id: typescript-check
        run: |
          echo "## 🎯 TypeScript Health Check" >> $GITHUB_STEP_SUMMARY
          if bun run type-check; then
            echo "typescript_healthy=true" >> $GITHUB_OUTPUT
            echo "✅ TypeScript compilation successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "typescript_healthy=false" >> $GITHUB_OUTPUT
            echo "❌ TypeScript compilation issues detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Code quality assessment
        id: lint-check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Code Quality Assessment" >> $GITHUB_STEP_SUMMARY
          if bun run lint; then
            echo "lint_healthy=true" >> $GITHUB_OUTPUT
            echo "✅ No linting issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "lint_healthy=false" >> $GITHUB_OUTPUT
            echo "⚠️ Linting issues detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔒 Security vulnerability scan
        id: security-scan
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
          if bun audit --audit-level moderate; then
            echo "security_healthy=true" >> $GITHUB_OUTPUT
            echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "security_healthy=false" >> $GITHUB_OUTPUT
            echo "⚠️ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🗄️ Database schema validation
        id: db-check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🗄️ Database Schema Validation" >> $GITHUB_STEP_SUMMARY
          bun run db:generate
          if [ -z "$(git status --porcelain src/lib/db/migrations/)" ]; then
            echo "db_healthy=true" >> $GITHUB_OUTPUT
            echo "✅ Database schema is up to date" >> $GITHUB_STEP_SUMMARY
          else
            echo "db_healthy=false" >> $GITHUB_OUTPUT
            echo "⚠️ Database schema changes detected but not committed" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db'

      - name: 📊 Calculate health score
        id: calculate-score
        run: |
          # Calculate health score based on checks
          score=0
          issues=""

          if [ "${{ steps.typescript-check.outputs.typescript_healthy }}" = "true" ]; then
            score=$((score + 25))
          else
            issues="${issues}TypeScript compilation errors; "
          fi

          if [ "${{ steps.lint-check.outputs.lint_healthy }}" = "true" ]; then
            score=$((score + 25))
          else
            issues="${issues}Code quality issues; "
          fi

          if [ "${{ steps.security-scan.outputs.security_healthy }}" = "true" ]; then
            score=$((score + 25))
          else
            issues="${issues}Security vulnerabilities; "
          fi

          if [ "${{ steps.db-check.outputs.db_healthy }}" = "true" ]; then
            score=$((score + 25))
          else
            issues="${issues}Database schema issues; "
          fi

          echo "score=$score" >> $GITHUB_OUTPUT
          echo "issues=$issues" >> $GITHUB_OUTPUT

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Overall Health Score: $score/100" >> $GITHUB_STEP_SUMMARY

    # Dependency analysis only (Vercel handles build performance)
  dependency-analysis:
    name: 📊 Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      dep-count: ${{ steps.dep-analysis.outputs.total-deps }}

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 📊 Dependency analysis
        id: dep-analysis
        run: |
          echo "## 📊 Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          PROD_DEPS=$(jq '.dependencies | length' package.json)
          DEV_DEPS=$(jq '.devDependencies | length' package.json)
          TOTAL_DEPS=$((PROD_DEPS + DEV_DEPS))

          echo "total-deps=$TOTAL_DEPS" >> $GITHUB_OUTPUT

          echo "- **Production dependencies:** $PROD_DEPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Development dependencies:** $DEV_DEPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Total dependencies:** $TOTAL_DEPS" >> $GITHUB_STEP_SUMMARY

          # Check node_modules size
          if [ -d "node_modules" ]; then
            MODULES_SIZE=$(du -sh node_modules | awk '{print $1}')
            echo "- **node_modules size:** $MODULES_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          # Dependency health assessment
          if [ "$TOTAL_DEPS" -lt 50 ]; then
            echo "✅ Lean dependency footprint" >> $GITHUB_STEP_SUMMARY
          elif [ "$TOTAL_DEPS" -lt 100 ]; then
            echo "⚠️ Moderate dependency count" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ High dependency count - consider audit" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ✅ Build verification (quick check)
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Build Verification" >> $GITHUB_STEP_SUMMARY
          echo "Quick check that project compiles (Vercel handles actual builds)" >> $GITHUB_STEP_SUMMARY

          if bun run build; then
            echo "✅ Project compiles successfully for Vercel deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build issues detected - needs attention" >> $GITHUB_STEP_SUMMARY
          fi

  # Create comprehensive maintenance report
  maintenance-report:
    name: 📋 Maintenance Report
    runs-on: ubuntu-latest
    needs: [health-audit, dependency-analysis]
    if: always()

    steps:
      - name: 📊 Generate comprehensive report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const date = new Date().toISOString().split('T')[0];
                        const healthScore = '${{ needs.health-audit.outputs.health-score }}' || '0';
            const issues = '${{ needs.health-audit.outputs.issues-found }}' || 'None detected';
            const depCount = '${{ needs.dependency-analysis.outputs.dep-count }}' || 'Unknown';

            const healthStatus = needs['health-audit'].result;
            const depStatus = needs['dependency-analysis'].result;

            // Determine overall health
            const overallHealth = parseInt(healthScore) >= 75 ? '🟢 HEALTHY' : 
                                parseInt(healthScore) >= 50 ? '🟡 ATTENTION' : '🔴 CRITICAL';

            const body = `## 🧹 Weekly Maintenance Report - ${date}

            ### 📊 System Health Overview

            **Overall Health Score: ${healthScore}/100** ${overallHealth}

            | Component | Status | Details |
            |-----------|--------|---------|
            | Code Quality | ${healthStatus === 'success' ? '✅ HEALTHY' : '❌ ISSUES'} | ${issues === 'None detected' ? 'All checks passed' : issues} |
            | Dependencies | ${depStatus === 'success' ? '✅ HEALTHY' : '⚠️ REVIEW'} | ${depCount} total packages |
            | Build Status | ✅ VERCEL | Vercel handles build optimization |

            ### 🔧 Maintenance Activities

            #### ✅ Completed This Week
            - [x] Comprehensive health assessment
            - [x] Security vulnerability scan  
            - [x] Dependency analysis and monitoring
            - [x] Database schema validation
            - [x] Build verification (Vercel-compatible)

            #### 🎯 Key Metrics
            - **Total Dependencies**: ${depCount}
            - **Health Score**: ${healthScore}/100
            - **Build Platform**: Vercel (optimized automatically)
            - **Code Quality**: ${healthStatus === 'success' ? 'Passing' : 'Needs attention'}

            ### 📈 Recommendations

            ${healthScore >= 75 ? 
              '✅ **System is healthy** - Continue current maintenance schedule' :
              healthScore >= 50 ?
              '⚠️ **Some attention needed** - Review detected issues and address during next sprint' :
              '🚨 **Immediate attention required** - Critical issues detected that should be addressed promptly'
            }

            ### 🔄 Automated Updates

            - **Renovate**: Managing dependency updates
            - **Kodiak**: Handling auto-merge for approved changes
            - **Formatting**: Scheduled code formatting maintenance

            ### 📅 Next Steps

            1. Review any detected issues
            2. Monitor Renovate dependency PRs
            3. Next automated maintenance: ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}

            ---
            *Generated automatically by ClubOS maintenance workflow*
            *For questions or issues, contact @dacrab*`;

            // Create maintenance issue or update existing one
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['🧹 maintenance', '📊 automated'],
              state: 'open'
            });

            if (issues.data.length > 0) {
              // Update existing maintenance issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });
              
              // Update title to reflect current week
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: `🧹 Weekly Maintenance Report - ${date}`
              });
            } else {
              // Create new maintenance issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🧹 Weekly Maintenance Report - ${date}`,
                body: body,
                labels: ['🧹 maintenance', '📊 automated', '📋 report']
              });
            }

      - name: 📝 Update workflow summary
        run: |
          echo "## 🧹 Weekly Maintenance Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Comprehensive system health check completed" >> $GITHUB_STEP_SUMMARY
          echo "📊 Maintenance report generated and posted as issue" >> $GITHUB_STEP_SUMMARY
          echo "🔄 Next maintenance scheduled for next Sunday" >> $GITHUB_STEP_SUMMARY
