# Weekly maintenance workflow for ClubOS
# Performs routine maintenance tasks and health checks

name: 🧹 Weekly Maintenance

on:
  schedule:
    # Run every Sunday at 1 AM UTC
    - cron: '0 1 * * 0'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Job 1: Health Check
  health-check:
    name: 🏥 System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Check project health
        run: |
          echo "## 🏥 Weekly Health Check Report" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for outdated dependencies
          echo "### 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
          if command -v bun >/dev/null 2>&1; then
            echo "✅ Bun package manager available" >> $GITHUB_STEP_SUMMARY
          fi

          # Check TypeScript configuration
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 TypeScript Health" >> $GITHUB_STEP_SUMMARY
          if bun run type-check; then
            echo "✅ TypeScript compilation successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ TypeScript compilation issues detected" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for lint issues
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Code Quality" >> $GITHUB_STEP_SUMMARY
          if bun run lint; then
            echo "✅ No linting issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Linting issues detected - see details above" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Dependency Audit
  dependency-maintenance:
    name: 📊 Dependency Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Security audit
        run: |
          echo "## 🔒 Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run security audit
          if bun audit --audit-level moderate; then
            echo "✅ No security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
            echo "Please review the audit results above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📈 Generate dependency report
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Dependency Overview" >> $GITHUB_STEP_SUMMARY

          PROD_COUNT=$(jq '.dependencies | length' package.json)
          DEV_COUNT=$(jq '.devDependencies | length' package.json)
          TOTAL_COUNT=$((PROD_COUNT + DEV_COUNT))

          echo "- **Production dependencies:** $PROD_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Development dependencies:** $DEV_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Total dependencies:** $TOTAL_COUNT" >> $GITHUB_STEP_SUMMARY

          # Check node_modules size
          if [ -d "node_modules" ]; then
            MODULES_SIZE=$(du -sh node_modules | awk '{print $1}')
            echo "- **node_modules size:** $MODULES_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Performance Baseline
  performance-baseline:
    name: 📈 Performance Baseline
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: ⚡ Build performance test
        run: |
          echo "## ⚡ Weekly Performance Baseline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Time the build
          START_TIME=$(date +%s)
          bun run build
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))

          echo "### 🏗️ Build Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Build time:** ${BUILD_TIME}s" >> $GITHUB_STEP_SUMMARY

          # Analyze bundle size
          if [ -d ".next/static" ]; then
            BUNDLE_SIZE=$(du -sh .next/static | awk '{print $1}')
            echo "- **Bundle size:** $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          # Performance status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Performance Status" >> $GITHUB_STEP_SUMMARY
          if [ "$BUILD_TIME" -lt 180 ]; then
            echo "✅ Build performance is excellent (< 3 minutes)" >> $GITHUB_STEP_SUMMARY
          elif [ "$BUILD_TIME" -lt 300 ]; then
            echo "⚠️ Build performance is acceptable (< 5 minutes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build performance needs attention (> 5 minutes)" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 4: Create maintenance report
  maintenance-report:
    name: 📋 Maintenance Report
    runs-on: ubuntu-latest
    needs: [health-check, dependency-maintenance, performance-baseline]
    if: always()

    steps:
      - name: 📊 Create weekly report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const date = new Date().toISOString().split('T')[0];
            const healthStatus = '${{ needs.health-check.result }}';
            const depStatus = '${{ needs.dependency-maintenance.result }}';
            const perfStatus = '${{ needs.performance-baseline.result }}';

            const body = `## 🧹 Weekly Maintenance Report - ${date}

            ### 📊 System Status Overview

            | Component | Status |
            |-----------|--------|
            | System Health | ${healthStatus === 'success' ? '✅ HEALTHY' : '❌ ISSUES'} |
            | Dependencies | ${depStatus === 'success' ? '✅ SECURE' : '⚠️ ATTENTION'} |
            | Performance | ${perfStatus === 'success' ? '✅ OPTIMAL' : '⚠️ REVIEW'} |

            ### 🔍 Weekly Maintenance Tasks Completed

            - [x] System health check
            - [x] Dependency security audit
            - [x] Performance baseline measurement
            - [x] Code quality validation

            ### 📈 Trends & Recommendations

            This automated report helps track the project's health over time.
            ${healthStatus !== 'success' || depStatus !== 'success' || perfStatus !== 'success' 
              ? '\n⚠️ **Action Required:** Some issues were detected. Please review the workflow logs.'
              : '\n✅ **All Good:** No immediate action required.'}

            ---
            *Generated automatically by ClubOS maintenance workflow*`;

            // Create or update the maintenance issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['🧹 maintenance', '📊 automated'],
              state: 'open'
            });

            if (issues.data.length > 0) {
              // Update existing maintenance issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });
            } else {
              // Create new maintenance issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🧹 Weekly Maintenance Report - ${date}`,
                body: body,
                labels: ['🧹 maintenance', '📊 automated', '📋 report']
              });
            }
