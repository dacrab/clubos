# Performance and Bundle Size Monitoring for ClubOS
# Monitors bundle size changes and performance metrics

name: 📊 Performance Monitoring

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Job 1: Bundle Size Analysis
  bundle-size:
    name: 📦 Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔨 Build for production
        run: bun run build
        env:
          NODE_ENV: production

      - name: 📊 Analyze bundle size
        run: |
          echo "## 📦 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get build stats
          if [ -d ".next/static" ]; then
            # Main JavaScript bundles
            echo "### 📜 JavaScript Bundles" >> $GITHUB_STEP_SUMMARY
            find .next/static -name "*.js" -type f -exec ls -lh {} + | \
              awk '{print "- " $9 ": " $5}' >> $GITHUB_STEP_SUMMARY || true
              
            # CSS bundles
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎨 CSS Bundles" >> $GITHUB_STEP_SUMMARY
            find .next/static -name "*.css" -type f -exec ls -lh {} + | \
              awk '{print "- " $9 ": " $5}' >> $GITHUB_STEP_SUMMARY || true
              
            # Total size
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📏 Total Bundle Size" >> $GITHUB_STEP_SUMMARY
            TOTAL_SIZE=$(du -sh .next/static | awk '{print $1}')
            echo "**Total Static Assets:** $TOTAL_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💾 Store bundle stats
        run: |
          mkdir -p ./bundle-stats

          # Generate detailed bundle analysis
          if [ -d ".next/static" ]; then
            find .next/static -name "*.js" -exec wc -c {} + > ./bundle-stats/js-sizes.txt
            find .next/static -name "*.css" -exec wc -c {} + > ./bundle-stats/css-sizes.txt
            du -b .next/static/* > ./bundle-stats/total-sizes.txt 2>/dev/null || true
          fi

      - name: 📈 Bundle size comparison (PR only)
        if: github.event_name == 'pull_request'
        run: |
          echo "## 📈 Bundle Size Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Bundle size analysis completed for PR #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Note:** For accurate size comparison, manual review recommended" >> $GITHUB_STEP_SUMMARY

  # Job 2: Build Time Analysis
  build-performance:
    name: ⚡ Build Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: |
          START_TIME=$(date +%s)
          bun install --frozen-lockfile
          END_TIME=$(date +%s)
          INSTALL_TIME=$((END_TIME - START_TIME))
          echo "INSTALL_TIME=$INSTALL_TIME" >> $GITHUB_ENV

      - name: ⚡ Measure build time
        run: |
          START_TIME=$(date +%s)
          bun run build
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV

      - name: 📊 Performance report
        run: |
          echo "## ⚡ Build Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏱️ Timing Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies Installation:** ${INSTALL_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Build:** ${BUILD_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Time:** $((INSTALL_TIME + BUILD_TIME))s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Performance recommendations
          echo "### 💡 Performance Insights" >> $GITHUB_STEP_SUMMARY
          if [ "$BUILD_TIME" -gt 300 ]; then
            echo "⚠️ Build time is over 5 minutes - consider optimizations" >> $GITHUB_STEP_SUMMARY
          elif [ "$BUILD_TIME" -gt 180 ]; then
            echo "⚠️ Build time is over 3 minutes - monitor for increases" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Build time is good (under 3 minutes)" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Dependency Analysis
  dependency-analysis:
    name: 📦 Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 📊 Analyze dependencies
        run: |
          echo "## 📊 Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count dependencies
          PROD_DEPS=$(jq '.dependencies | length' package.json)
          DEV_DEPS=$(jq '.devDependencies | length' package.json)
          TOTAL_DEPS=$((PROD_DEPS + DEV_DEPS))

          echo "### 📈 Dependency Count" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Dependencies:** $PROD_DEPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Development Dependencies:** $DEV_DEPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Dependencies:** $TOTAL_DEPS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for large dependencies
          echo "### 🔍 Size Analysis" >> $GITHUB_STEP_SUMMARY
          NODE_MODULES_SIZE=$(du -sh node_modules | awk '{print $1}')
          echo "- **node_modules size:** $NODE_MODULES_SIZE" >> $GITHUB_STEP_SUMMARY

          # Recommendations
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 Recommendations" >> $GITHUB_STEP_SUMMARY
          if [ "$TOTAL_DEPS" -gt 100 ]; then
            echo "⚠️ High dependency count ($TOTAL_DEPS) - consider audit" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Dependency count is reasonable" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 4: Performance Summary
  performance-summary:
    name: 📋 Performance Summary
    runs-on: ubuntu-latest
    needs: [bundle-size, build-performance, dependency-analysis]
    if: always()

    steps:
      - name: 📊 Generate performance summary
        run: |
          echo "## 🎯 Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Analysis Results" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.bundle-size.result }}" == "success" ]]; then
            echo "✅ **Bundle Size Analysis:** COMPLETED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Bundle Size Analysis:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-performance.result }}" == "success" ]]; then
            echo "✅ **Build Performance:** COMPLETED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Performance:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.dependency-analysis.result }}" == "success" ]]; then
            echo "✅ **Dependency Analysis:** COMPLETED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Analysis:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Analysis Date:** $(date)" >> $GITHUB_STEP_SUMMARY
